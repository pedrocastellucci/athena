diff --git a/.ipynb_checkpoints/Mathematical programming with Julia and JuMP-checkpoint.ipynb b/.ipynb_checkpoints/Mathematical programming with Julia and JuMP-checkpoint.ipynb
new file mode 100644
index 0000000..07878d0
--- /dev/null
+++ b/.ipynb_checkpoints/Mathematical programming with Julia and JuMP-checkpoint.ipynb	
@@ -0,0 +1,795 @@
+{
+ "cells": [
+  {
+   "cell_type": "markdown",
+   "metadata": {},
+   "source": [
+    "# Solving mixed integer programs with Julia/JuMP\n",
+    "\n",
+    "<i>Copyright 2016, Pedro Belin Castellucci,\n",
+    "\n",
+    "This work is licensed under a <a rel=\"license\" href=\"http://creativecommons.org/licenses/by/4.0/\">Creative Commons Attribution 4.0 International License</a>.</i>\n",
+    "\n",
+    "\n",
+    "In this Notebook, we will explore some basics of the JuMP modeling language. Although it is a modeling language, it enables the usage of different solvers. By ways of an example, we will use [Clp](https://projects.coin-or.org/Clp)\n",
+    "-- a complete list of supported solvers and JuMP documentation can be found at this [link](https://jump.readthedocs.io/en/latest/). Also, JuMP support linear programming, mixed-integer programming, second-order conic programming, semidefinite programming, and nonlinear programming, but we will focus on linear and integer programming here.\n",
+    "\n",
+    "The first step is to install JuMP."
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 1,
+   "metadata": {
+    "collapsed": false
+   },
+   "outputs": [
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "INFO: Nothing to be done\n",
+      "INFO: METADATA is out-of-date — you may not have the latest version of JuMP\n",
+      "INFO: Use `Pkg.update()` to get the latest versions of your packages\n"
+     ]
+    }
+   ],
+   "source": [
+    "Pkg.add(\"JuMP\")"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {},
+   "source": [
+    "We can also install Clp in the same way."
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 2,
+   "metadata": {
+    "collapsed": false
+   },
+   "outputs": [
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "INFO: Cloning cache of Cbc from https://github.com/JuliaOpt/Cbc.jl.git\n",
+      "INFO: Cloning cache of Clp from https://github.com/JuliaOpt/Clp.jl.git\n",
+      "INFO: Installing Cbc v0.2.4\n",
+      "INFO: Installing Clp v0.2.2\n",
+      "INFO: Building Cbc\n",
+      "INFO: Package database updated\n",
+      "INFO: METADATA is out-of-date — you may not have the latest version of Clp\n",
+      "INFO: Use `Pkg.update()` to get the latest versions of your packages\n"
+     ]
+    }
+   ],
+   "source": [
+    "Pkg.add(\"Clp\");"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {},
+   "source": [
+    "To get a feeling of JuMP basic function we will implement the following model:\n",
+    "\n",
+    "$Max\\ x + y$\n",
+    "\n",
+    "subject to:\n",
+    "\n",
+    "$2x + 4y <= 10,$\n",
+    "\n",
+    "$2x + 2y <= 10.$\n",
+    "\n",
+    "We begin by creating a Model object."
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 3,
+   "metadata": {
+    "collapsed": false
+   },
+   "outputs": [
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "INFO: Recompiling stale cache file /home/juser/.julia/lib/v0.5/DataStructures.ji for module DataStructures.\n",
+      "INFO: Recompiling stale cache file /home/juser/.julia/lib/v0.5/JuMP.ji for module JuMP.\n",
+      "INFO: Precompiling module Clp.\n"
+     ]
+    },
+    {
+     "data": {
+      "text/latex": [
+       "$$ \\begin{alignat*}{1}\\min\\quad & 0\\\\\n",
+       "\\text{Subject to} \\quad\\end{alignat*}\n",
+       " $$"
+      ],
+      "text/plain": [
+       "Feasibility problem with:\n",
+       " * 0 linear constraints\n",
+       " * 0 variables\n",
+       "Solver is default solver"
+      ]
+     },
+     "execution_count": 3,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "using JuMP  # Tell that we are using the JuMP library\n",
+    "using Clp   # Tell that we are using the Clp solver\n",
+    "\n",
+    "m = Model()"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {},
+   "source": [
+    "The second step is to define the variables. Their are associated with the model and can created using the <i>@variable</i> macro."
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 4,
+   "metadata": {
+    "collapsed": false
+   },
+   "outputs": [
+    {
+     "data": {
+      "text/latex": [
+       "$$ y $$"
+      ],
+      "text/plain": [
+       "y"
+      ]
+     },
+     "execution_count": 4,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "@variable(m, x)\n",
+    "@variable(m, y)"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {},
+   "source": [
+    "Then, the objective function."
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 5,
+   "metadata": {
+    "collapsed": false
+   },
+   "outputs": [
+    {
+     "data": {
+      "text/latex": [
+       "$$ x + y $$"
+      ],
+      "text/plain": [
+       "x + y"
+      ]
+     },
+     "execution_count": 5,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "@objective(m, Max, x + y)"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {},
+   "source": [
+    "Finally, the constraints."
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 6,
+   "metadata": {
+    "collapsed": false
+   },
+   "outputs": [
+    {
+     "data": {
+      "text/latex": [
+       "$$ \\begin{alignat*}{1}\\max\\quad & x + y\\\\\n",
+       "\\text{Subject to} \\quad & 2 x + 3 y \\leq 10\\\\\n",
+       " & 3 x + 2 y \\leq 10\\\\\n",
+       " & x free\\\\\n",
+       " & y free\\\\\n",
+       "\\end{alignat*}\n",
+       " $$"
+      ],
+      "text/plain": [
+       "Maximization problem with:\n",
+       " * 2 linear constraints\n",
+       " * 2 variables\n",
+       "Solver is default solver"
+      ]
+     },
+     "execution_count": 6,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "@constraint(m, 2x + 3y <= 10)\n",
+    "@constraint(m, 3x + 2y <= 10)\n",
+    "\n",
+    "m  # Just to diplay our model"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {},
+   "source": [
+    "Now that we have completely defined our model, we may want to solve it."
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 7,
+   "metadata": {
+    "collapsed": false
+   },
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       ":Optimal"
+      ]
+     },
+     "execution_count": 7,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "solve(m)"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {},
+   "source": [
+    "The solve function returns the status of the solving procedure. We can query for the solution and variable values using <i>getobjectivevalue</i> and <i>getvalue</i> functions."
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 9,
+   "metadata": {
+    "collapsed": false
+   },
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "Objective function = NaN\n",
+      "x = NaN\n",
+      "y = NaN\n"
+     ]
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "WARNING: Variable value not defined for x. Check that the model was properly solved.\n",
+      "WARNING: Variable value not defined for y. Check that the model was properly solved.\n"
+     ]
+    }
+   ],
+   "source": [
+    "println(\"Objective function = \", getobjectivevalue(m))\n",
+    "\n",
+    "println(\"x = \", getvalue(x))\n",
+    "println(\"y = \", getvalue(y))"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {},
+   "source": [
+    "## Exercise\n",
+    "\n",
+    "Implement and solve the following model:\n",
+    "\n",
+    "$Min\\ 2x - 3y + z$\n",
+    "\n",
+    "subject to:\n",
+    "\n",
+    "$x - y - z = 10,$\n",
+    "\n",
+    "$3x - 4y + 4z \\geq 25,$\n",
+    "\n",
+    "$x, y, z \\geq 0.$"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {},
+   "source": [
+    "## The least absolute method\n",
+    "\n",
+    "In this example, let us assume we have some experimental data and want to fit a linear model to it. Perhaps, the most famous method to accomplish this is to use the Least Square Method, which finds the linear model that minimizes the squared error, i. e. the distance from data points to the model. Instead of minimizing the square error, we will minimize the absolute error. More formally, we have experimental points $(x_i, y_i)$, $i = 1, \\ldots, n$ and we want the parameters $(a, b)$ of a function $f(x) = ax + b$ such that:\n",
+    "\n",
+    "$$\\sum_{i=1}^n |f(x_i) - y_i|$$\n",
+    "\n",
+    "is minimized. We can formulate a linear programming model of the problem using $a$ and $b$ as decision variables:\n",
+    "\n",
+    "$\\displaystyle Min\\ \\sum_{i=1}^n\\epsilon_i$,\n",
+    "\n",
+    "subject to:\n",
+    "\n",
+    "$\\displaystyle y_i - a x_i - b \\leq \\epsilon_i, \\quad i=1, \\ldots, n$,\n",
+    "\n",
+    "$\\displaystyle - (y_i - a x_i - b) \\leq \\epsilon_i, \\quad i=1, \\ldots, n$ .\n",
+    "\n",
+    "To test it, let us generate some data."
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 10,
+   "metadata": {
+    "collapsed": false
+   },
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "\n"
+     ]
+    },
+    {
+     "data": {
+      "text/plain": [
+       "10×2 Array{Float64,2}:\n",
+       "  0.0858363   0.106553\n",
+       "  2.94934     1.55284 \n",
+       "  2.24231     2.84707 \n",
+       "  5.23721     5.22734 \n",
+       "  6.79298     6.26833 \n",
+       "  5.46946     6.86409 \n",
+       "  8.82958     6.69228 \n",
+       "  8.55734     7.82183 \n",
+       "  9.83927    10.3502  \n",
+       " 11.183      11.4955  "
+      ]
+     },
+     "execution_count": 10,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "n = 10  # We will use 10 points\n",
+    "\n",
+    "points = Array{Float64, Float64}[]\n",
+    "points = zeros(0, 2)\n",
+    "\n",
+    "println(points)\n",
+    "for i=1:n\n",
+    "    \n",
+    "    # They are generated around the curve f(x) = x\n",
+    "    xRand = rand()*3 - 1\n",
+    "    yRand = rand()*3 - 1\n",
+    "\n",
+    "    x, y = i + xRand, i + yRand\n",
+    "    points = [points; x y]\n",
+    "end\n",
+    "\n",
+    "points"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {},
+   "source": [
+    "To get a sense of the data, let us scatter plot it. For that, we are going to use the <i>PyPlot</i> library."
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {
+    "collapsed": true
+   },
+   "outputs": [],
+   "source": [
+    "Pkg.add(\"PyPlot\")"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {},
+   "source": [
+    "And then, we plot the points one by one."
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {
+    "collapsed": true
+   },
+   "outputs": [],
+   "source": [
+    "using PyPlot\n",
+    "\n",
+    "grid(\"on\")\n",
+    "\n",
+    "for j in 1:size(points,1)\n",
+    "    xp, yp = points[j, :]\n",
+    "    scatter(xp, yp)\n",
+    "end"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {},
+   "source": [
+    "Now, we implement the model presented earlier."
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {
+    "collapsed": true
+   },
+   "outputs": [],
+   "source": [
+    "using JuMP\n",
+    "\n",
+    "m = Model()  # Creating the model object\n",
+    "\n",
+    "# Defining the variables:\n",
+    "@variable(m, err[1:n])  # error (epsilon)\n",
+    "@variable(m, a)  # angular coefficient\n",
+    "@variable(m, b)  # linear coefficient\n",
+    "\n",
+    "@objective(m, Min, sum(err[i] for i in 1:n))\n",
+    "\n",
+    "for i in 1:n\n",
+    "    @constraint(m, points[i, 2] - a*points[i, 1] - b <= err[i])\n",
+    "    @constraint(m, - (points[i, 2] - a*points[i, 1] - b) <= err[i])\n",
+    "end\n",
+    "\n",
+    "m"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {},
+   "source": [
+    "We want to solve the model and get the values of $a$ and $b$."
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {
+    "collapsed": true
+   },
+   "outputs": [],
+   "source": [
+    "println(\"We have obtained an $(solve(m)) solution.\")\n",
+    "println(\"a = $(getvalue(a))\")\n",
+    "println(\"b = $(getvalue(b))\")"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {},
+   "source": [
+    "Let us plot the solution to see the result."
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {
+    "collapsed": true
+   },
+   "outputs": [],
+   "source": [
+    "for j in 1:size(points,1)\n",
+    "    xp, yp = points[j, :]\n",
+    "    scatter(xp, yp)\n",
+    "end\n",
+    "\n",
+    "y = [getvalue(a)*points[i, 1] + getvalue(b) for i in 1:size(points,1)]\n",
+    "plot(points[:, 1], y)"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {},
+   "source": [
+    "Out of curiosity, we can compare our result with a standard Least Square regression. For this, we can use the GLM and DataFrames packages."
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {
+    "collapsed": true
+   },
+   "outputs": [],
+   "source": [
+    "Pkg.add(\"GLM\")\n",
+    "Pkg.add(\"DataFrames\")"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {
+    "collapsed": true
+   },
+   "outputs": [],
+   "source": [
+    "using DataFrames\n",
+    "using GLM\n",
+    "data = DataFrame(X=points[:, 1], Y=points[:, 2])\n",
+    "result = glm(Y ~ X, data, Normal(), IdentityLink())\n",
+    "bLS, aLS = coef(result) \n",
+    "\n",
+    "for j in 1:size(points,1)\n",
+    "    xp, yp = points[j, :]\n",
+    "    scatter(xp, yp)\n",
+    "end\n",
+    "\n",
+    "y = [getvalue(a)*points[i, 1] + getvalue(b) for i in 1:size(points,1)]\n",
+    "plot(points[:, 1], y)\n",
+    "\n",
+    "y = [aLS*points[i, 1] + bLS for i in 1:size(points,1)]\n",
+    "plot(points[:, 1], y)"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {},
+   "source": [
+    "We can see the curves are similar. The least square method have the characteristic of heavily penalize outliers, so point to far from the mean may have a big influence on regression. Note that we have generated the points randomly, you can rerun the experiments to see possible differences in the results.\n",
+    "\n",
+    "## A more classical example -- The knapsack problem\n",
+    "\n",
+    "Let $i \\in I$ be an item with value $v_i$ and volume $c_i$. We want to choose the most valuable subset of items to carry in a knaspack withouth violating its capacity $C$. Let $x_i \\in \\{0, 1\\}$, $i \\in I$ indicate whether item $i$ is put into the knapsack. The following integer program solver our knapsack problem.\n",
+    "\n",
+    "$\\displaystyle Max\\ \\sum_{i \\in I} v_i x_i$\n",
+    "\n",
+    "subject to\n",
+    "\n",
+    "$\\displaystyle \\sum_{i \\in I} c_i x_i \\leq C,$\n",
+    "\n",
+    "$x_i \\in \\{0, 1\\}, i \\in I.$\n",
+    "\n",
+    "We will implement this program using JuMP. First, we need some input data."
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {
+    "collapsed": true
+   },
+   "outputs": [],
+   "source": [
+    "v = [3, 1, 4, 6, 2, 7, 2, 4, 7, 9, 5, 7, 3, 1]  # Value of the items.\n",
+    "c = [2, 5, 3, 8, 9, 6, 4, 8, 2, 2, 1, 4, 2, 3]  # Volume of the items.\n",
+    "n = length(v)  # How many items we have\n",
+    "\n",
+    "C = 12  # The capacity of our knapsack."
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {},
+   "source": [
+    "We do the same as before, create our model."
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 11,
+   "metadata": {
+    "collapsed": false
+   },
+   "outputs": [
+    {
+     "data": {
+      "text/latex": [
+       "$$ \\begin{alignat*}{1}\\min\\quad & 0\\\\\n",
+       "\\text{Subject to} \\quad\\end{alignat*}\n",
+       " $$"
+      ],
+      "text/plain": [
+       "Feasibility problem with:\n",
+       " * 0 linear constraints\n",
+       " * 0 variables\n",
+       "Solver is default solver"
+      ]
+     },
+     "execution_count": 11,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "m = Model()"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {},
+   "source": [
+    "But now, we are not going to creating the variables one by one, instead we will use the following."
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 12,
+   "metadata": {
+    "collapsed": false
+   },
+   "outputs": [
+    {
+     "data": {
+      "text/latex": [
+       "$$ x_{i} \\in \\{0,1\\} \\quad\\forall i \\in \\{1,2,\\dots,9,10\\} $$"
+      ],
+      "text/plain": [
+       "10-element Array{JuMP.Variable,1}:\n",
+       " x[1] \n",
+       " x[2] \n",
+       " x[3] \n",
+       " x[4] \n",
+       " x[5] \n",
+       " x[6] \n",
+       " x[7] \n",
+       " x[8] \n",
+       " x[9] \n",
+       " x[10]"
+      ]
+     },
+     "execution_count": 12,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "@variable(m, x[i=1:n], Bin)"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {},
+   "source": [
+    "Which is a shortcut for adding the variables <i>x[1]</i> to <i>x[|n|]</i> to the model <i>m</i>. To add the objective function we can use the <i> sum </i> function."
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {
+    "collapsed": true
+   },
+   "outputs": [],
+   "source": [
+    "@objective(m, Max, sum(v[i]*x[i] for i=1:n))"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {},
+   "source": [
+    "It can also be used to create constraints."
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {
+    "collapsed": true
+   },
+   "outputs": [],
+   "source": [
+    "@constraint(m, sum(x[i]*c[i] for i=1:n) <= C)\n",
+    "\n",
+    "m  # Just to print our model."
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {},
+   "source": [
+    "And then, we can solve our model."
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {
+    "collapsed": true
+   },
+   "outputs": [],
+   "source": [
+    "solve(m)"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {},
+   "source": [
+    "Finally, we can query for the solution."
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {
+    "collapsed": true
+   },
+   "outputs": [],
+   "source": [
+    "println(\"Take \\t Don't take\")\n",
+    "\n",
+    "for i in collect(1:n)\n",
+    "    if getvalue(x[i]) >= 0.99\n",
+    "        println(\"$i\")\n",
+    "    else\n",
+    "        println(\"\\t $i\")\n",
+    "    end\n",
+    "end"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {},
+   "source": [
+    "In this Notebook, we have explored the basics of JuMP regarding mixed integer linear programming. For a more detailed exposition the reader is referred to [JuMP documentation](https://jump.readthedocs.io/en/latest/).\n",
+    "\n",
+    "Hope you had fun! (="
+   ]
+  }
+ ],
+ "metadata": {
+  "kernelspec": {
+   "display_name": "Julia 0.5.0",
+   "language": "julia",
+   "name": "julia-0.5"
+  },
+  "language_info": {
+   "file_extension": ".jl",
+   "mimetype": "application/julia",
+   "name": "julia",
+   "version": "0.5.0"
+  }
+ },
+ "nbformat": 4,
+ "nbformat_minor": 1
+}
diff --git a/.ipynb_checkpoints/Untitled-checkpoint.ipynb b/.ipynb_checkpoints/Untitled-checkpoint.ipynb
new file mode 100644
index 0000000..59ce53d
--- /dev/null
+++ b/.ipynb_checkpoints/Untitled-checkpoint.ipynb
@@ -0,0 +1,6 @@
+{
+ "cells": [],
+ "metadata": {},
+ "nbformat": 4,
+ "nbformat_minor": 1
+}
diff --git a/Mathematical programming with Julia and JuMP.ipynb b/Mathematical programming with Julia and JuMP.ipynb
index 8bdf264..07878d0 100644
--- a/Mathematical programming with Julia and JuMP.ipynb	
+++ b/Mathematical programming with Julia and JuMP.ipynb	
@@ -19,11 +19,21 @@
   },
   {
    "cell_type": "code",
-   "execution_count": null,
+   "execution_count": 1,
    "metadata": {
-    "collapsed": true
+    "collapsed": false
    },
-   "outputs": [],
+   "outputs": [
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "INFO: Nothing to be done\n",
+      "INFO: METADATA is out-of-date — you may not have the latest version of JuMP\n",
+      "INFO: Use `Pkg.update()` to get the latest versions of your packages\n"
+     ]
+    }
+   ],
    "source": [
     "Pkg.add(\"JuMP\")"
    ]
@@ -46,8 +56,10 @@
      "name": "stderr",
      "output_type": "stream",
      "text": [
+      "INFO: Cloning cache of Cbc from https://github.com/JuliaOpt/Cbc.jl.git\n",
       "INFO: Cloning cache of Clp from https://github.com/JuliaOpt/Clp.jl.git\n",
-      "INFO: Installing Clp v0.3.0\n",
+      "INFO: Installing Cbc v0.2.4\n",
+      "INFO: Installing Clp v0.2.2\n",
       "INFO: Building Cbc\n",
       "INFO: Package database updated\n",
       "INFO: METADATA is out-of-date — you may not have the latest version of Clp\n",
@@ -78,12 +90,21 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 2,
+   "execution_count": 3,
    "metadata": {
     "collapsed": false
    },
    "outputs": [
     {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "INFO: Recompiling stale cache file /home/juser/.julia/lib/v0.5/DataStructures.ji for module DataStructures.\n",
+      "INFO: Recompiling stale cache file /home/juser/.julia/lib/v0.5/JuMP.ji for module JuMP.\n",
+      "INFO: Precompiling module Clp.\n"
+     ]
+    },
+    {
      "data": {
       "text/latex": [
        "$$ \\begin{alignat*}{1}\\min\\quad & 0\\\\\n",
@@ -97,7 +118,7 @@
        "Solver is default solver"
       ]
      },
-     "execution_count": 2,
+     "execution_count": 3,
      "metadata": {},
      "output_type": "execute_result"
     }
@@ -118,7 +139,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 6,
+   "execution_count": 4,
    "metadata": {
     "collapsed": false
    },
@@ -132,7 +153,7 @@
        "y"
       ]
      },
-     "execution_count": 6,
+     "execution_count": 4,
      "metadata": {},
      "output_type": "execute_result"
     }
@@ -151,7 +172,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 7,
+   "execution_count": 5,
    "metadata": {
     "collapsed": false
    },
@@ -165,7 +186,7 @@
        "x + y"
       ]
      },
-     "execution_count": 7,
+     "execution_count": 5,
      "metadata": {},
      "output_type": "execute_result"
     }
@@ -183,11 +204,34 @@
   },
   {
    "cell_type": "code",
-   "execution_count": null,
+   "execution_count": 6,
    "metadata": {
-    "collapsed": true
+    "collapsed": false
    },
-   "outputs": [],
+   "outputs": [
+    {
+     "data": {
+      "text/latex": [
+       "$$ \\begin{alignat*}{1}\\max\\quad & x + y\\\\\n",
+       "\\text{Subject to} \\quad & 2 x + 3 y \\leq 10\\\\\n",
+       " & 3 x + 2 y \\leq 10\\\\\n",
+       " & x free\\\\\n",
+       " & y free\\\\\n",
+       "\\end{alignat*}\n",
+       " $$"
+      ],
+      "text/plain": [
+       "Maximization problem with:\n",
+       " * 2 linear constraints\n",
+       " * 2 variables\n",
+       "Solver is default solver"
+      ]
+     },
+     "execution_count": 6,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
    "source": [
     "@constraint(m, 2x + 3y <= 10)\n",
     "@constraint(m, 3x + 2y <= 10)\n",
@@ -204,26 +248,18 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 8,
+   "execution_count": 7,
    "metadata": {
     "collapsed": false
    },
    "outputs": [
     {
-     "name": "stderr",
-     "output_type": "stream",
-     "text": [
-      "WARNING: Not solved to optimality, status: Unbounded\n",
-      "WARNING: Unbounded ray not available\n"
-     ]
-    },
-    {
      "data": {
       "text/plain": [
-       ":Unbounded"
+       ":Optimal"
       ]
      },
-     "execution_count": 8,
+     "execution_count": 7,
      "metadata": {},
      "output_type": "execute_result"
     }
diff --git a/Untitled.ipynb b/Untitled.ipynb
new file mode 100644
index 0000000..ed570f6
--- /dev/null
+++ b/Untitled.ipynb
@@ -0,0 +1,123 @@
+{
+ "cells": [
+  {
+   "cell_type": "code",
+   "execution_count": 1,
+   "metadata": {
+    "collapsed": false
+   },
+   "outputs": [
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "INFO: Initializing package repository /home/juser/.julia/v0.5\n",
+      "INFO: Cloning METADATA from https://github.com/JuliaLang/METADATA.jl\n",
+      "INFO: Cloning cache of ColorTypes from https://github.com/JuliaGraphics/ColorTypes.jl.git\n",
+      "INFO: Cloning cache of Colors from https://github.com/JuliaGraphics/Colors.jl.git\n",
+      "INFO: Cloning cache of Compat from https://github.com/JuliaLang/Compat.jl.git\n",
+      "INFO: Cloning cache of FixedPointNumbers from https://github.com/JuliaMath/FixedPointNumbers.jl.git\n",
+      "INFO: Cloning cache of FixedSizeArrays from https://github.com/SimonDanisch/FixedSizeArrays.jl.git\n",
+      "INFO: Cloning cache of Iterators from https://github.com/JuliaLang/Iterators.jl.git\n",
+      "INFO: Cloning cache of Measures from https://github.com/JuliaGraphics/Measures.jl.git\n",
+      "INFO: Cloning cache of PlotThemes from https://github.com/JuliaPlots/PlotThemes.jl.git\n",
+      "INFO: Cloning cache of PlotUtils from https://github.com/JuliaPlots/PlotUtils.jl.git\n",
+      "INFO: Cloning cache of Plots from https://github.com/tbreloff/Plots.jl.git\n",
+      "INFO: Cloning cache of RecipesBase from https://github.com/JuliaPlots/RecipesBase.jl.git\n",
+      "INFO: Cloning cache of Reexport from https://github.com/simonster/Reexport.jl.git\n",
+      "INFO: Cloning cache of Showoff from https://github.com/JuliaGraphics/Showoff.jl.git\n",
+      "INFO: Installing ColorTypes v0.2.12\n",
+      "INFO: Installing Colors v0.6.9\n",
+      "INFO: Installing Compat v0.10.0\n",
+      "INFO: Installing FixedPointNumbers v0.2.1\n",
+      "INFO: Installing FixedSizeArrays v0.2.5\n",
+      "INFO: Installing Iterators v0.2.0\n",
+      "INFO: Installing Measures v0.0.3\n",
+      "INFO: Installing PlotThemes v0.1.0\n",
+      "INFO: Installing PlotUtils v0.2.0\n",
+      "INFO: Installing Plots v0.10.2\n",
+      "INFO: Installing RecipesBase v0.1.0\n",
+      "INFO: Installing Reexport v0.0.3\n",
+      "INFO: Installing Showoff v0.0.7\n",
+      "INFO: Building Plots\n",
+      "INFO: Cannot find deps/plotly-latest.min.js... downloading latest version.\n",
+      "  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n",
+      "                                 Dload  Upload   Total   Spent    Left  Speed\n",
+      "100 1873k  100 1873k    0     0  5081k      0 --:--:-- --:--:-- --:--:-- 5089k\n",
+      "INFO: Package database updated\n"
+     ]
+    }
+   ],
+   "source": [
+    "Pkg.add(\"Plots\")"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 2,
+   "metadata": {
+    "collapsed": false
+   },
+   "outputs": [
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "INFO: Cloning cache of Calculus from https://github.com/johnmyleswhite/Calculus.jl.git\n",
+      "INFO: Cloning cache of DataStructures from https://github.com/JuliaLang/DataStructures.jl.git\n",
+      "INFO: Cloning cache of DiffBase from https://github.com/JuliaDiff/DiffBase.jl.git\n",
+      "INFO: Cloning cache of ForwardDiff from https://github.com/JuliaDiff/ForwardDiff.jl.git\n",
+      "INFO: Cloning cache of JuMP from https://github.com/JuliaOpt/JuMP.jl.git\n",
+      "INFO: Cloning cache of Lazy from https://github.com/MikeInnes/Lazy.jl.git\n",
+      "INFO: Cloning cache of MacroTools from https://github.com/MikeInnes/MacroTools.jl.git\n",
+      "INFO: Cloning cache of MathProgBase from https://github.com/JuliaOpt/MathProgBase.jl.git\n",
+      "INFO: Cloning cache of NaNMath from https://github.com/mlubin/NaNMath.jl.git\n",
+      "INFO: Cloning cache of ReverseDiffSparse from https://github.com/mlubin/ReverseDiffSparse.jl.git\n",
+      "INFO: Installing Calculus v0.1.15\n",
+      "INFO: Installing DataStructures v0.4.6\n",
+      "INFO: Installing DiffBase v0.0.2\n",
+      "INFO: Installing ForwardDiff v0.3.3\n",
+      "INFO: Installing JuMP v0.15.0\n",
+      "INFO: Installing Lazy v0.11.4\n",
+      "INFO: Installing MacroTools v0.3.4\n",
+      "INFO: Installing MathProgBase v0.5.8\n",
+      "INFO: Installing NaNMath v0.2.2\n",
+      "INFO: Installing ReverseDiffSparse v0.6.0\n",
+      "INFO: Package database updated\n",
+      "INFO: Cloning cache of BinDeps from https://github.com/JuliaLang/BinDeps.jl.git\n",
+      "INFO: Cloning cache of Cbc from https://github.com/JuliaOpt/Cbc.jl.git\n",
+      "INFO: Cloning cache of Clp from https://github.com/JuliaOpt/Clp.jl.git\n",
+      "INFO: Cloning cache of SHA from https://github.com/staticfloat/SHA.jl.git\n",
+      "INFO: Cloning cache of URIParser from https://github.com/JuliaWeb/URIParser.jl.git\n",
+      "INFO: Installing BinDeps v0.4.5\n",
+      "INFO: Installing Cbc v0.3.0\n",
+      "INFO: Installing Clp v0.3.0\n",
+      "INFO: Installing SHA v0.3.0\n",
+      "INFO: Installing URIParser v0.1.6\n",
+      "INFO: Building Cbc\n",
+      "INFO: Package database updated\n"
+     ]
+    }
+   ],
+   "source": [
+    "Pkg.add(\"JuMP\")\n",
+    "Pkg.add(\"Clp\")"
+   ]
+  }
+ ],
+ "metadata": {
+  "kernelspec": {
+   "display_name": "Julia 0.5.0",
+   "language": "julia",
+   "name": "julia-0.5"
+  },
+  "language_info": {
+   "file_extension": ".jl",
+   "mimetype": "application/julia",
+   "name": "julia",
+   "version": "0.5.0"
+  }
+ },
+ "nbformat": 4,
+ "nbformat_minor": 1
+}
diff --git a/juliaTutorial/.~Extracting bibliographic information -- Strings, Files and Dictionaries.ipynb b/juliaTutorial/.~Extracting bibliographic information -- Strings, Files and Dictionaries.ipynb
new file mode 100644
index 0000000..e69de29
diff --git a/juliaTutorial/Escaping Earth with Julia.ipynb b/juliaTutorial/Escaping Earth with Julia.ipynb
index d5cad8d..848630c 100644
--- a/juliaTutorial/Escaping Earth with Julia.ipynb	
+++ b/juliaTutorial/Escaping Earth with Julia.ipynb	
@@ -26,7 +26,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 4,
+   "execution_count": 1,
    "metadata": {
     "collapsed": false
    },
@@ -37,7 +37,7 @@
        "6378000"
       ]
      },
-     "execution_count": 4,
+     "execution_count": 1,
      "metadata": {},
      "output_type": "execute_result"
     }
@@ -56,7 +56,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 5,
+   "execution_count": 2,
    "metadata": {
     "collapsed": false
    },
@@ -67,7 +67,7 @@
        "(Float64,Int64,String)"
       ]
      },
-     "execution_count": 5,
+     "execution_count": 2,
      "metadata": {},
      "output_type": "execute_result"
     }
@@ -85,7 +85,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 6,
+   "execution_count": 3,
    "metadata": {
     "collapsed": false
    },
@@ -96,7 +96,7 @@
        "6378000"
       ]
      },
-     "execution_count": 6,
+     "execution_count": 3,
      "metadata": {},
      "output_type": "execute_result"
     }
@@ -117,7 +117,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 7,
+   "execution_count": 4,
    "metadata": {
     "collapsed": false
    },
@@ -128,7 +128,7 @@
        "localGravity (generic function with 1 method)"
       ]
      },
-     "execution_count": 7,
+     "execution_count": 4,
      "metadata": {},
      "output_type": "execute_result"
     }
@@ -148,7 +148,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 8,
+   "execution_count": 5,
    "metadata": {
     "collapsed": false
    },
@@ -157,7 +157,7 @@
      "name": "stderr",
      "output_type": "stream",
      "text": [
-      "WARNING: Method definition localGravity(Any, Any, Any) in module Main at In[7]:2 overwritten at In[8]:1.\n"
+      "WARNING: Method definition localGravity(Any, Any, Any) in module Main at In[4]:2 overwritten at In[5]:1.\n"
      ]
     },
     {
@@ -166,7 +166,7 @@
        "localGravity (generic function with 1 method)"
       ]
      },
-     "execution_count": 8,
+     "execution_count": 5,
      "metadata": {},
      "output_type": "execute_result"
     }
@@ -194,7 +194,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 11,
+   "execution_count": 6,
    "metadata": {
     "collapsed": false
    },
@@ -264,7 +264,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 20,
+   "execution_count": 16,
    "metadata": {
     "collapsed": false
    },
@@ -273,14 +273,29 @@
      "name": "stderr",
      "output_type": "stream",
      "text": [
-      "INFO: Nothing to be done\n",
-      "INFO: METADATA is out-of-date — you may not have the latest version of PyPlot\n",
-      "INFO: Use `Pkg.update()` to get the latest versions of your packages\n"
+      "INFO: Cloning cache of AxisAlgorithms from https://github.com/timholy/AxisAlgorithms.jl.git\n"
+     ]
+    },
+    {
+     "ename": "LoadError",
+     "evalue": "LoadError: Cannot clone AxisAlgorithms from https://github.com/timholy/AxisAlgorithms.jl.git. Failed to make directory '/home/juser/.julia/.cache/AxisAlgorithms/objects': No space left on device\n in prefetch(::String, ::String, ::Array{String,1}) at ./pkg/cache.jl:56\n in resolve(::Dict{String,Base.Pkg.Types.VersionSet}, ::Dict{String,Dict{VersionNumber,Base.Pkg.Types.Available}}, ::Dict{String,Tuple{VersionNumber,Bool}}, ::Dict{String,Base.Pkg.Types.Fixed}, ::Dict{String,VersionNumber}, ::Set{String}) at ./pkg/entry.jl:512\n in resolve(::Dict{String,Base.Pkg.Types.VersionSet}, ::Dict{String,Dict{VersionNumber,Base.Pkg.Types.Available}}, ::Dict{String,Tuple{VersionNumber,Bool}}, ::Dict{String,Base.Pkg.Types.Fixed}) at ./pkg/entry.jl:476\n in edit(::Function, ::String, ::Base.Pkg.Types.VersionSet, ::Vararg{Base.Pkg.Types.VersionSet,N}) at ./pkg/entry.jl:30\n in (::Base.Pkg.Entry.##2#5{String,Base.Pkg.Types.VersionSet})() at ./task.jl:360\nwhile loading In[16], in expression starting on line 2",
+     "output_type": "error",
+     "traceback": [
+      "LoadError: Cannot clone AxisAlgorithms from https://github.com/timholy/AxisAlgorithms.jl.git. Failed to make directory '/home/juser/.julia/.cache/AxisAlgorithms/objects': No space left on device\n in prefetch(::String, ::String, ::Array{String,1}) at ./pkg/cache.jl:56\n in resolve(::Dict{String,Base.Pkg.Types.VersionSet}, ::Dict{String,Dict{VersionNumber,Base.Pkg.Types.Available}}, ::Dict{String,Tuple{VersionNumber,Bool}}, ::Dict{String,Base.Pkg.Types.Fixed}, ::Dict{String,VersionNumber}, ::Set{String}) at ./pkg/entry.jl:512\n in resolve(::Dict{String,Base.Pkg.Types.VersionSet}, ::Dict{String,Dict{VersionNumber,Base.Pkg.Types.Available}}, ::Dict{String,Tuple{VersionNumber,Bool}}, ::Dict{String,Base.Pkg.Types.Fixed}) at ./pkg/entry.jl:476\n in edit(::Function, ::String, ::Base.Pkg.Types.VersionSet, ::Vararg{Base.Pkg.Types.VersionSet,N}) at ./pkg/entry.jl:30\n in (::Base.Pkg.Entry.##2#5{String,Base.Pkg.Types.VersionSet})() at ./task.jl:360\nwhile loading In[16], in expression starting on line 2",
+      "",
+      " in sync_end() at ./task.jl:311",
+      " in macro expansion at ./task.jl:327 [inlined]",
+      " in add(::String, ::Base.Pkg.Types.VersionSet) at ./pkg/entry.jl:51",
+      " in (::Base.Pkg.Dir.##2#3{Array{Any,1},Base.Pkg.Entry.#add,Tuple{String}})() at ./pkg/dir.jl:31",
+      " in cd(::Base.Pkg.Dir.##2#3{Array{Any,1},Base.Pkg.Entry.#add,Tuple{String}}, ::String) at ./file.jl:59",
+      " in #cd#1(::Array{Any,1}, ::Function, ::Function, ::String, ::Vararg{Any,N}) at ./pkg/dir.jl:31",
+      " in add(::String) at ./pkg/pkg.jl:100"
      ]
     }
    ],
    "source": [
-    "Pkg.add(\"PyPlot\")"
+    "# Pkg.add(\"PyPlot\")\n",
+    "Pkg.add(\"Gadfly\")"
    ]
   },
   {
@@ -294,7 +309,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 21,
+   "execution_count": 8,
    "metadata": {
     "collapsed": false
    },
@@ -305,7 +320,7 @@
        "1:10"
       ]
      },
-     "execution_count": 21,
+     "execution_count": 8,
      "metadata": {},
      "output_type": "execute_result"
     }
@@ -323,7 +338,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 22,
+   "execution_count": 9,
    "metadata": {
     "collapsed": false
    },
@@ -334,7 +349,7 @@
        "UnitRange{Int64}"
       ]
      },
-     "execution_count": 22,
+     "execution_count": 9,
      "metadata": {},
      "output_type": "execute_result"
     }
@@ -352,7 +367,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 23,
+   "execution_count": 10,
    "metadata": {
     "collapsed": false
    },
@@ -373,7 +388,7 @@
        " 10"
       ]
      },
-     "execution_count": 23,
+     "execution_count": 10,
      "metadata": {},
      "output_type": "execute_result"
     }
@@ -391,7 +406,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 24,
+   "execution_count": 11,
    "metadata": {
     "collapsed": false
    },
@@ -413,7 +428,7 @@
        " 2.0"
       ]
      },
-     "execution_count": 24,
+     "execution_count": 11,
      "metadata": {},
      "output_type": "execute_result"
     }
@@ -431,7 +446,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 25,
+   "execution_count": 12,
    "metadata": {
     "collapsed": false
    },
@@ -468,7 +483,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 26,
+   "execution_count": 13,
    "metadata": {
     "collapsed": false
    },
@@ -509,31 +524,53 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 27,
+   "execution_count": 14,
    "metadata": {
     "collapsed": false
    },
    "outputs": [
     {
-     "data": {
-      "image/png": "",
-      "text/plain": [
-       "PyPlot.Figure(PyObject <matplotlib.figure.Figure object at 0x7f74fb3e4110>)"
-      ]
-     },
-     "metadata": {},
-     "output_type": "display_data"
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "INFO: Precompiling module PyPlot.\n",
+      "WARNING: Module JSON with uuid 12226205058090 is missing from the cache.\n",
+      "This may mean module JSON does not support precompilation but is imported by a module that does.\n",
+      "ERROR: LoadError: Declaring __precompile__(false) is not allowed in files that are being precompiled.\n",
+      " in require(::Symbol) at ./loading.jl:385\n",
+      " in _include_from_serialized(::String) at ./loading.jl:150\n",
+      " in _require_from_serialized(::Int64, ::Symbol, ::String, ::Bool) at ./loading.jl:187\n",
+      " in _require_search_from_serialized(::Int64, ::Symbol, ::String, ::Bool) at ./loading.jl:217\n",
+      " in require(::Symbol) at ./loading.jl:371\n",
+      " in include_from_node1(::String) at ./loading.jl:488\n",
+      " in macro expansion; at ./none:2 [inlined]\n",
+      " in anonymous at ./<missing>:?\n",
+      " in eval(::Module, ::Any) at ./boot.jl:234\n",
+      " in process_options(::Base.JLOptions) at ./client.jl:239\n",
+      " in _start() at ./client.jl:318\n",
+      "while loading /home/juser/.julia/v0.5/PyCall/src/PyCall.jl, in expression starting on line 28\n",
+      "ERROR: LoadError: Failed to precompile PyCall to /home/juser/.julia/lib/v0.5/PyCall.ji.\n",
+      " in compilecache(::String) at ./loading.jl:593\n",
+      " in require(::Symbol) at ./loading.jl:393\n",
+      " in include_from_node1(::String) at ./loading.jl:488\n",
+      " in macro expansion; at ./none:2 [inlined]\n",
+      " in anonymous at ./<missing>:?\n",
+      " in eval(::Module, ::Any) at ./boot.jl:234\n",
+      " in process_options(::Base.JLOptions) at ./client.jl:239\n",
+      " in _start() at ./client.jl:318\n",
+      "while loading /home/juser/.julia/v0.5/PyPlot/src/PyPlot.jl, in expression starting on line 5\n"
+     ]
     },
     {
-     "data": {
-      "text/plain": [
-       "1-element Array{Any,1}:\n",
-       " PyObject <matplotlib.lines.Line2D object at 0x7f74ec75a910>"
-      ]
-     },
-     "execution_count": 27,
-     "metadata": {},
-     "output_type": "execute_result"
+     "ename": "LoadError",
+     "evalue": "LoadError: Failed to precompile PyPlot to /home/juser/.julia/lib/v0.5/PyPlot.ji.\nwhile loading In[14], in expression starting on line 1",
+     "output_type": "error",
+     "traceback": [
+      "LoadError: Failed to precompile PyPlot to /home/juser/.julia/lib/v0.5/PyPlot.ji.\nwhile loading In[14], in expression starting on line 1",
+      "",
+      " in compilecache(::String) at ./loading.jl:593",
+      " in require(::Symbol) at ./loading.jl:393"
+     ]
     }
    ],
    "source": [
diff --git a/juliaTutorial/Extracting bibliographic information -- Strings, Files and Dictionaries.ipynb b/juliaTutorial/Extracting bibliographic information -- Strings, Files and Dictionaries.ipynb
index 03dc244..d8d3528 100644
--- a/juliaTutorial/Extracting bibliographic information -- Strings, Files and Dictionaries.ipynb	
+++ b/juliaTutorial/Extracting bibliographic information -- Strings, Files and Dictionaries.ipynb	
@@ -32,7 +32,7 @@
     {
      "data": {
       "text/plain": [
-       "'c'"
+       "\"Hello\""
       ]
      },
      "execution_count": 1,
@@ -61,7 +61,7 @@
     {
      "data": {
       "text/plain": [
-       "(String,Char)"
+       "String"
       ]
      },
      "execution_count": 2,
@@ -82,7 +82,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 14,
+   "execution_count": 3,
    "metadata": {
     "collapsed": false
    },
@@ -144,7 +144,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 16,
+   "execution_count": 5,
    "metadata": {
     "collapsed": false
    },
@@ -160,7 +160,7 @@
        "strip(s::AbstractString, chars::Union{AbstractArray{Char,1},Char,Set{Char},Tuple{Vararg{Char,N<:Any}}}) at strings/util.jl:90"
       ]
      },
-     "execution_count": 16,
+     "execution_count": 5,
      "metadata": {},
      "output_type": "execute_result"
     }
@@ -178,7 +178,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 20,
+   "execution_count": 6,
    "metadata": {
     "collapsed": false
    },
@@ -189,7 +189,7 @@
        "\"string to be stripped\""
       ]
      },
-     "execution_count": 20,
+     "execution_count": 6,
      "metadata": {},
      "output_type": "execute_result"
     }
@@ -208,7 +208,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 21,
+   "execution_count": 7,
    "metadata": {
     "collapsed": false
    },
@@ -219,7 +219,7 @@
        "\"Hello, World!\""
       ]
      },
-     "execution_count": 21,
+     "execution_count": 7,
      "metadata": {},
      "output_type": "execute_result"
     }
@@ -238,7 +238,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 42,
+   "execution_count": 8,
    "metadata": {
     "collapsed": false
    },
@@ -254,7 +254,7 @@
        " \"here.\" "
       ]
      },
-     "execution_count": 42,
+     "execution_count": 8,
      "metadata": {},
      "output_type": "execute_result"
     }
@@ -272,7 +272,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 8,
+   "execution_count": 9,
    "metadata": {
     "collapsed": false
    },
@@ -286,7 +286,7 @@
        " \" That's all we need\"              "
       ]
      },
-     "execution_count": 8,
+     "execution_count": 9,
      "metadata": {},
      "output_type": "execute_result"
     }
@@ -304,7 +304,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 22,
+   "execution_count": 10,
    "metadata": {
     "collapsed": false
    },
@@ -329,7 +329,7 @@
        "parse(stream::IO; greedy, raise) at markdown/Julia/interp.jl:4"
       ]
      },
-     "execution_count": 22,
+     "execution_count": 10,
      "metadata": {},
      "output_type": "execute_result"
     }
@@ -347,7 +347,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 10,
+   "execution_count": 11,
    "metadata": {
     "collapsed": false
    },
@@ -357,7 +357,7 @@
      "output_type": "stream",
      "text": [
       "String\n",
-      "Int32\n"
+      "Int64\n"
      ]
     }
    ],
@@ -383,7 +383,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 27,
+   "execution_count": 12,
    "metadata": {
     "collapsed": true
    },
@@ -403,7 +403,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 68,
+   "execution_count": 13,
    "metadata": {
     "collapsed": false
    },
@@ -1098,7 +1098,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 12,
+   "execution_count": 14,
    "metadata": {
     "collapsed": false
    },
@@ -1113,7 +1113,7 @@
        "  1  => \"John Doe\""
       ]
      },
-     "execution_count": 12,
+     "execution_count": 14,
      "metadata": {},
      "output_type": "execute_result"
     }
@@ -1131,7 +1131,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 13,
+   "execution_count": 15,
    "metadata": {
     "collapsed": false
    },
@@ -1142,7 +1142,7 @@
        "\"Mary Doe\""
       ]
      },
-     "execution_count": 13,
+     "execution_count": 15,
      "metadata": {},
      "output_type": "execute_result"
     }
@@ -1160,17 +1160,17 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 14,
+   "execution_count": 16,
    "metadata": {
     "collapsed": false
    },
    "outputs": [
     {
      "ename": "LoadError",
-     "evalue": "KeyError: key 2 not found",
+     "evalue": "LoadError: KeyError: key 2 not found\nwhile loading In[16], in expression starting on line 1",
      "output_type": "error",
      "traceback": [
-      "KeyError: key 2 not found",
+      "LoadError: KeyError: key 2 not found\nwhile loading In[16], in expression starting on line 1",
       "",
       " in getindex(::Dict{Int64,String}, ::Int64) at ./dict.jl:688"
      ]
@@ -1189,7 +1189,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 33,
+   "execution_count": 17,
    "metadata": {
     "collapsed": false
    },
@@ -1205,7 +1205,7 @@
        "  1  => \"John Doe\""
       ]
      },
-     "execution_count": 33,
+     "execution_count": 17,
      "metadata": {},
      "output_type": "execute_result"
     }
@@ -1224,7 +1224,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 47,
+   "execution_count": 18,
    "metadata": {
     "collapsed": false
    },
@@ -1254,7 +1254,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 16,
+   "execution_count": 19,
    "metadata": {
     "collapsed": false
    },
@@ -1342,7 +1342,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 18,
+   "execution_count": 20,
    "metadata": {
     "collapsed": false
    },
@@ -1403,7 +1403,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 71,
+   "execution_count": 21,
    "metadata": {
     "collapsed": false
    },
@@ -1412,7 +1412,32 @@
      "name": "stderr",
      "output_type": "stream",
      "text": [
-      "INFO: Nothing to be done\n"
+      "INFO: Cloning cache of ColorTypes from https://github.com/JuliaGraphics/ColorTypes.jl.git\n",
+      "INFO: Cloning cache of Colors from https://github.com/JuliaGraphics/Colors.jl.git\n",
+      "INFO: Cloning cache of Conda from https://github.com/JuliaPy/Conda.jl.git\n",
+      "INFO: Cloning cache of FixedPointNumbers from https://github.com/JuliaMath/FixedPointNumbers.jl.git\n",
+      "INFO: Cloning cache of JSON from https://github.com/JuliaIO/JSON.jl.git\n",
+      "INFO: Cloning cache of LaTeXStrings from https://github.com/stevengj/LaTeXStrings.jl.git\n",
+      "INFO: Cloning cache of PyCall from https://github.com/JuliaPy/PyCall.jl.git\n",
+      "INFO: Cloning cache of PyPlot from https://github.com/JuliaPy/PyPlot.jl.git\n",
+      "INFO: Cloning cache of Reexport from https://github.com/simonster/Reexport.jl.git\n",
+      "INFO: Installing BinDeps v0.4.5\n",
+      "INFO: Installing ColorTypes v0.2.12\n",
+      "INFO: Installing Colors v0.6.9\n",
+      "INFO: Installing Conda v0.3.2\n",
+      "INFO: Installing FixedPointNumbers v0.2.1\n",
+      "INFO: Installing JSON v0.8.0\n",
+      "INFO: Installing LaTeXStrings v0.2.0\n",
+      "INFO: Installing PyCall v1.7.2\n",
+      "INFO: Installing PyPlot v2.2.4\n",
+      "INFO: Installing Reexport v0.0.3\n",
+      "INFO: Installing SHA v0.2.1\n",
+      "INFO: Installing URIParser v0.1.6\n",
+      "INFO: Building PyCall\n",
+      "INFO: PyCall is using python (Python 2.7.6) at /usr/bin/python, libpython = libpython2.7\n",
+      "INFO: Package database updated\n",
+      "INFO: METADATA is out-of-date — you may not have the latest version of PyPlot\n",
+      "INFO: Use `Pkg.update()` to get the latest versions of your packages\n"
      ]
     }
    ],
@@ -1429,20 +1454,53 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 52,
+   "execution_count": 22,
    "metadata": {
     "collapsed": false
    },
    "outputs": [
     {
-     "data": {
-      "image/png": "",
-      "text/plain": [
-       "PyPlot.Figure(PyObject <matplotlib.figure.Figure object at 0x7f9ec490d910>)"
-      ]
-     },
-     "metadata": {},
-     "output_type": "display_data"
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "INFO: Precompiling module PyPlot.\n",
+      "WARNING: Module JSON with uuid 12226205058090 is missing from the cache.\n",
+      "This may mean module JSON does not support precompilation but is imported by a module that does.\n",
+      "ERROR: LoadError: Declaring __precompile__(false) is not allowed in files that are being precompiled.\n",
+      " in require(::Symbol) at ./loading.jl:385\n",
+      " in _include_from_serialized(::String) at ./loading.jl:150\n",
+      " in _require_from_serialized(::Int64, ::Symbol, ::String, ::Bool) at ./loading.jl:187\n",
+      " in _require_search_from_serialized(::Int64, ::Symbol, ::String, ::Bool) at ./loading.jl:217\n",
+      " in require(::Symbol) at ./loading.jl:371\n",
+      " in include_from_node1(::String) at ./loading.jl:488\n",
+      " in macro expansion; at ./none:2 [inlined]\n",
+      " in anonymous at ./<missing>:?\n",
+      " in eval(::Module, ::Any) at ./boot.jl:234\n",
+      " in process_options(::Base.JLOptions) at ./client.jl:239\n",
+      " in _start() at ./client.jl:318\n",
+      "while loading /home/juser/.julia/v0.5/PyCall/src/PyCall.jl, in expression starting on line 28\n",
+      "ERROR: LoadError: Failed to precompile PyCall to /home/juser/.julia/lib/v0.5/PyCall.ji.\n",
+      " in compilecache(::String) at ./loading.jl:593\n",
+      " in require(::Symbol) at ./loading.jl:393\n",
+      " in include_from_node1(::String) at ./loading.jl:488\n",
+      " in macro expansion; at ./none:2 [inlined]\n",
+      " in anonymous at ./<missing>:?\n",
+      " in eval(::Module, ::Any) at ./boot.jl:234\n",
+      " in process_options(::Base.JLOptions) at ./client.jl:239\n",
+      " in _start() at ./client.jl:318\n",
+      "while loading /home/juser/.julia/v0.5/PyPlot/src/PyPlot.jl, in expression starting on line 5\n"
+     ]
+    },
+    {
+     "ename": "LoadError",
+     "evalue": "LoadError: Failed to precompile PyPlot to /home/juser/.julia/lib/v0.5/PyPlot.ji.\nwhile loading In[22], in expression starting on line 1",
+     "output_type": "error",
+     "traceback": [
+      "LoadError: Failed to precompile PyPlot to /home/juser/.julia/lib/v0.5/PyPlot.ji.\nwhile loading In[22], in expression starting on line 1",
+      "",
+      " in compilecache(::String) at ./loading.jl:593",
+      " in require(::Symbol) at ./loading.jl:393"
+     ]
     }
    ],
    "source": [